pipeline {
    agent any

    stages {
        stage('Get Code') {
            steps {
                // Obtener el cÃ³digo del repo
                git 'https://github.com/Zephyro-E/eroman_unir.git'
                stash name: 'code', includes:''
            }
        }
        stage ('rest, unit y performance') {
            parallel{
                stage('Unit and Coverage') {
                    agent {
                        label 'windows'
                    }
                    steps {
                        unstash name: 'code'
                            bat '''
                                set PYTHONPATH=%WORKSPACE%
                                pytest --junitxml=result-unit.xml test\\unit || exit 0
                                coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit
                                coverage xml
                            '''
                        cobertura coberturaReportFile:'coverage.xml', conditionalCoverageTargets: '100,80,90', lineCoverageTargets: '100,85,95', onlyStable: false, failUnstable: false
                        junit 'result-unit.xml'
                    }
                }
                stage('Rest') {
                    agent {
                        label 'linux1'
                    }
                    steps {
                        unstash name: 'code'
                        sh '''
                            set FLASK_APP=app\\api.py
                            start flask run
                        
                            set PYTHONPATH=%WORKSPACE%
                            pytest --junitxml=result-rest.xml test\\rest || exit 0
                            '''
                    }
                }
                stage('Performance') {
                    agent {
                        label 'linux2'
                    }
                    steps {
                        unstash 'code'
                        sh '''
                           C:\\Users\\Eduardo\\Desktop\\DevOps-UNIR\\programas\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl
                        '''
                           perfReport sourceDataFiles: 'flask.jtl'
                    }
                }
            }
        }                
        stage('Static') {
            agent {
                label 'windows'
            }
            steps {
                bat '''
                    flake8 --exit-zero --ignore=W391 --format=pylint app >flake8.out
                '''
                recordIssues tools: [flake8(name: 'flake8', pattern: 'flake8.out')], qualityGates: [[threshold:8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
            }
        }
        stage('Security') {
            agent {
                label 'windows'
            }
                steps {
                    bat '''
                        bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                    '''
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold:2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                }
        }
    }
}
