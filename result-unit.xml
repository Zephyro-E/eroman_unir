<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="2" time="5.496" timestamp="2024-05-06T05:06:52.299137" hostname="Otacon"><testcase classname="test.rest.api_test.TestApi" name="test_api_add" time="4.100"><failure message="urllib.error.URLError: &lt;urlopen error timed out&gt;">self = &lt;urllib.request.HTTPHandler object at 0x000001DCA483E2D0&gt;, http_class = &lt;class 'http.client.HTTPConnection'&gt;
req = &lt;urllib.request.Request object at 0x000001DCA4806990&gt;, http_conn_args = {}, host = 'localhost:5000'
h = &lt;http.client.HTTPConnection object at 0x000001DCA481ECC0&gt;
headers = {'Connection': 'close', 'Host': 'localhost:5000', 'User-Agent': 'Python-urllib/3.12'}

    def do_open(self, http_class, req, **http_conn_args):
        """Return an HTTPResponse object for the request, using http_class.
    
        http_class must implement the HTTPConnection API from http.client.
        """
        host = req.host
        if not host:
            raise URLError('no host given')
    
        # will parse host:port
        h = http_class(host, timeout=req.timeout, **http_conn_args)
        h.set_debuglevel(self._debuglevel)
    
        headers = dict(req.unredirected_hdrs)
        headers.update({k: v for k, v in req.headers.items()
                        if k not in headers})
    
        # TODO(jhylton): Should this be redesigned to handle
        # persistent connections?
    
        # We want to make an HTTP/1.1 request, but the addinfourl
        # class isn't prepared to deal with a persistent connection.
        # It will try to read all remaining data from the socket,
        # which will block while the server waits for the next request.
        # So make sure the connection gets closed after the (only)
        # request.
        headers["Connection"] = "close"
        headers = {name.title(): val for name, val in headers.items()}
    
        if req._tunnel_host:
            tunnel_headers = {}
            proxy_auth_hdr = "Proxy-Authorization"
            if proxy_auth_hdr in headers:
                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]
                # Proxy-Authorization should not be sent to origin
                # server.
                del headers[proxy_auth_hdr]
            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)
    
        try:
            try:
&gt;               h.request(req.get_method(), req.selector, req.data, headers,
                          encode_chunked=req.has_header('Transfer-encoding'))

..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\urllib\request.py:1344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\http\client.py:1336: in request
    self._send_request(method, url, body, headers, encode_chunked)
..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\http\client.py:1382: in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\http\client.py:1331: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\http\client.py:1091: in _send_output
    self.send(msg)
..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\http\client.py:1035: in send
    self.connect()
..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\http\client.py:1001: in connect
    self.sock = self._create_connection(
..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\socket.py:852: in create_connection
    raise exceptions[0]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = ('localhost', 5000), timeout = 2, source_address = None

    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, *, all_errors=False):
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        A host of '' or port 0 tells the OS to use the default. When a connection
        cannot be created, raises the last error if *all_errors* is False,
        and an ExceptionGroup of all errors if *all_errors* is True.
        """
    
        host, port = address
        exceptions = []
        for res in getaddrinfo(host, port, 0, SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket(af, socktype, proto)
                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               TimeoutError: timed out

..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\socket.py:837: TimeoutError

During handling of the above exception, another exception occurred:

self = &lt;rest.api_test.TestApi testMethod=test_api_add&gt;

    def test_api_add(self):
        url = f"{BASE_URL}/calc/add/1/2"
&gt;       response = urlopen(url, timeout=DEFAULT_TIMEOUT)

test\rest\api_test.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\urllib\request.py:215: in urlopen
    return opener.open(url, data, timeout)
..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\urllib\request.py:515: in open
    response = self._open(req, data)
..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\urllib\request.py:532: in _open
    result = self._call_chain(self.handle_open, protocol, protocol +
..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\urllib\request.py:492: in _call_chain
    result = func(*args)
..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\urllib\request.py:1373: in http_open
    return self.do_open(http.client.HTTPConnection, req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib.request.HTTPHandler object at 0x000001DCA483E2D0&gt;, http_class = &lt;class 'http.client.HTTPConnection'&gt;
req = &lt;urllib.request.Request object at 0x000001DCA4806990&gt;, http_conn_args = {}, host = 'localhost:5000'
h = &lt;http.client.HTTPConnection object at 0x000001DCA481ECC0&gt;
headers = {'Connection': 'close', 'Host': 'localhost:5000', 'User-Agent': 'Python-urllib/3.12'}

    def do_open(self, http_class, req, **http_conn_args):
        """Return an HTTPResponse object for the request, using http_class.
    
        http_class must implement the HTTPConnection API from http.client.
        """
        host = req.host
        if not host:
            raise URLError('no host given')
    
        # will parse host:port
        h = http_class(host, timeout=req.timeout, **http_conn_args)
        h.set_debuglevel(self._debuglevel)
    
        headers = dict(req.unredirected_hdrs)
        headers.update({k: v for k, v in req.headers.items()
                        if k not in headers})
    
        # TODO(jhylton): Should this be redesigned to handle
        # persistent connections?
    
        # We want to make an HTTP/1.1 request, but the addinfourl
        # class isn't prepared to deal with a persistent connection.
        # It will try to read all remaining data from the socket,
        # which will block while the server waits for the next request.
        # So make sure the connection gets closed after the (only)
        # request.
        headers["Connection"] = "close"
        headers = {name.title(): val for name, val in headers.items()}
    
        if req._tunnel_host:
            tunnel_headers = {}
            proxy_auth_hdr = "Proxy-Authorization"
            if proxy_auth_hdr in headers:
                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]
                # Proxy-Authorization should not be sent to origin
                # server.
                del headers[proxy_auth_hdr]
            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)
    
        try:
            try:
                h.request(req.get_method(), req.selector, req.data, headers,
                          encode_chunked=req.has_header('Transfer-encoding'))
            except OSError as err: # timeout error
&gt;               raise URLError(err)
E               urllib.error.URLError: &lt;urlopen error timed out&gt;

..\..\..\..\AppData\Local\Programs\Python\Python312\Lib\urllib\request.py:1347: URLError</failure></testcase><testcase classname="test.rest.api_test.TestApi" name="test_api_sqrt" time="0.016" /></testsuite></testsuites>